from torchvision import models
import torch.nn.functional as F
from .resnet_model import *

class Decoder(nn.Module):
    def __init__(self):
        super(Decoder, self).__init__()

        resnet = models.resnet34(pretrained=True)

        ## -------------Decoder--------------
        #stage 5d
        self.conv5d_1 = nn.Conv2d(768,384,3,padding=1) # 384 + 384
        self.bn5d_1 = nn.BatchNorm2d(384)
        self.relu5d_1 = nn.ReLU(inplace=True)

        self.conv5d_m = nn.Conv2d(384,128,3,dilation=2, padding=2)
        self.bn5d_m = nn.BatchNorm2d(128)
        self.relu5d_m = nn.ReLU(inplace=True)

        self.conv5d_2 = nn.Conv2d(128,128,3,dilation=2, padding=2)
        self.bn5d_2 = nn.BatchNorm2d(128)
        self.relu5d_2 = nn.ReLU(inplace=True)

        #stage 4d
        self.conv4d_1 = nn.Conv2d(192,128,3,padding=1)  #  128+64
        self.bn4d_1 = nn.BatchNorm2d(128)
        self.relu4d_1 = nn.ReLU(inplace=True)

        self.conv4d_m = nn.Conv2d(128,128,3,padding=1)
        self.bn4d_m = nn.BatchNorm2d(128)
        self.relu4d_m = nn.ReLU(inplace=True)

        self.conv4d_2 = nn.Conv2d(128,128,3,padding=1)
        self.bn4d_2 = nn.BatchNorm2d(128)
        self.relu4d_2 = nn.ReLU(inplace=True)

        #stage 3d
        self.conv3d_1 = nn.Conv2d(192,128,3,padding=1)   #  128+64
        self.bn3d_1 = nn.BatchNorm2d(128)
        self.relu3d_1 = nn.ReLU(inplace=True)

        self.conv3d_m = nn.Conv2d(128,128,3,padding=1)
        self.bn3d_m = nn.BatchNorm2d(128)
        self.relu3d_m = nn.ReLU(inplace=True)

        self.conv3d_2 = nn.Conv2d(128,128,3,padding=1)
        self.bn3d_2 = nn.BatchNorm2d(128)
        self.relu3d_2 = nn.ReLU(inplace=True)

        #stage 2d
        self.conv2d_1 = nn.Conv2d(128,64,3,padding=1)
        self.bn2d_1 = nn.BatchNorm2d(64)
        self.relu2d_1 = nn.ReLU(inplace=True)

        self.conv2d_m = nn.Conv2d(64,64,3,padding=1)
        self.bn2d_m = nn.BatchNorm2d(64)
        self.relu2d_m = nn.ReLU(inplace=True)

        self.conv2d_2 = nn.Conv2d(64,64,3,padding=1)
        self.bn2d_2 = nn.BatchNorm2d(64)
        self.relu2d_2 = nn.ReLU(inplace=True)

        # stage 1d
        self.conv1d_1 = nn.Conv2d(67, 64, 3, padding=1)  # 64+3
        self.bn1d_1 = nn.BatchNorm2d(64)
        self.relu1d_1 = nn.ReLU(inplace=True)

        self.conv1d_m = nn.Conv2d(64, 16, 3, padding=1)
        self.bn1d_m = nn.BatchNorm2d(16)
        self.relu1d_m = nn.ReLU(inplace=True)

        self.conv1d_2 = nn.Conv2d(16, 3, 3, padding=1)
        self.bn1d_2 = nn.BatchNorm2d(3)
        self.relu1d_2 = nn.ReLU(inplace=True)

        ## -------------Bilinear Upsampling--------------
        self.upscore16 = nn.Upsample(scale_factor=16, mode='bilinear')
        self.upscore8  = nn.Upsample(scale_factor=8,  mode='bilinear')
        self.upscore4  = nn.Upsample(scale_factor=4,  mode='bilinear')
        self.upscore2  = nn.Upsample(scale_factor=2,  mode='bilinear')

        ## -------------Side Output--------------
        self.outconvb = nn.Conv2d(768, 1, 3, padding=1)
        self.outconv5 = nn.Conv2d(128, 1, 3, padding=1)
        self.outconv4 = nn.Conv2d(128, 1, 3, padding=1)
        self.outconv3 = nn.Conv2d(128,  1, 3, padding=1)
        self.outconv2 = nn.Conv2d(64,   1, 3, padding=1)
        self.outconv1 = nn.Conv2d(3, 1, 3, padding=1)

    def forward(self, img, depth, img_layer3, img_layer2, img_layer1):  # adopt three depth_layers generated by of T2T module

        hx = self.relu5d_1(self.bn5d_1(self.conv5d_1(torch.cat((img, depth), 1))))  # 384+384
        hx = self.relu5d_m(self.bn5d_m(self.conv5d_m(hx)))
        hd5 = self.relu5d_2(self.bn5d_2(self.conv5d_2(hx)))

        hx = self.upscore2(hd5) # 14 -> 28

        hx = self.relu4d_1(self.bn4d_1(self.conv4d_1(torch.cat((hx, img_layer3),1))))
        hx = self.relu4d_m(self.bn4d_m(self.conv4d_m(hx)))
        hd4 = self.relu4d_2(self.bn4d_2(self.conv4d_2(hx)))

        hx = self.upscore2(hd4) # 28 -> 56

        hx = self.relu3d_1(self.bn3d_1(self.conv3d_1((torch.cat((hx, img_layer2),1)))))
        hx = self.relu3d_m(self.bn3d_m(self.conv3d_m(hx)))
        hd3 = self.relu3d_2(self.bn3d_2(self.conv3d_2(hx)))

        hx = self.upscore2(hd3) # 56 -> 112

        hx = self.relu2d_1(self.bn2d_1(self.conv2d_1(hx)))
        hx = self.relu2d_m(self.bn2d_m(self.conv2d_m(hx)))
        hd2 = self.relu2d_2(self.bn2d_2(self.conv2d_2(hx)))

        hx = self.upscore2(hd2)  # 112 -> 224

        hx = self.relu1d_1(self.bn1d_1(self.conv1d_1(torch.cat((hx, img_layer1), 1))))
        hx = self.relu1d_m(self.bn1d_m(self.conv1d_m(hx)))
        hd1 = self.relu1d_2(self.bn1d_2(self.conv1d_2(hx)))

        ## -------------Side Output-------------
        db = self.outconvb(torch.cat((img, depth),1))
        udb = self.upscore16(db)  # 14->224

        d5 = self.outconv5(hd5)
        ud5 = self.upscore16(d5)  # 14->224

        d4 = self.outconv4(hd4)
        ud4 = self.upscore8(d4)   # 28->224

        d3 = self.outconv3(hd3)
        ud3 = self.upscore4(d3)   # 56->224

        d2 = self.outconv2(hd2)
        ud2 = self.upscore2(d2)   # 112->224

        d1 = self.outconv1(hd1)   # 224->224

        return F.sigmoid(d1), F.sigmoid(d2), F.sigmoid(d3), F.sigmoid(d4), F.sigmoid(d5), F.sigmoid(db), F.sigmoid(ud2), F.sigmoid(ud3), F.sigmoid(ud4), F.sigmoid(ud5), F.sigmoid(udb)
